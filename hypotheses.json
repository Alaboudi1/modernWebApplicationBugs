{
    "evidence": {
        "API_calls": [
            {
                "functionName": "preventDefault",
                "patterns": [
                    {
                        "pattern": "$E.preventDefault()"
                    }
                ],
                "id": "API_1",
                "description": "the default behavior for the event was prevented"
            },
            {
                "patterns": [
                    {
                        "pattern": "fetch($URL). ... .then($X => $X.json())"
                    }
                ],
                "id": "API_3",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "getEventKey",
                "patterns": [
                    {
                        "pattern-either": [
                            {
                                "pattern": "<$R\n...\nonKeyUp={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyDown={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyUp={...}\n...>\n...</$R>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyDown={...}\n...>\n...</$R>"
                            }
                        ]
                    }
                ],
                "id": "API_4",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "onMouseOver",
                "patterns": [
                    {
                        "pattern-either": [
                            {
                                "pattern": "<$R\n...\nonMouseOver={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonMouseOver={...}\n...>\n...</$R>"
                            }
                        ]
                    }
                ],
                "id": "API_5",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "onMouseOut",
                "patterns": [
                    {
                        "pattern-either": [
                            {
                                "pattern": "<$R\n...\nonMouseOut={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonMouseOut={...}\n...>\n...</$R>"
                            }
                        ]
                    }
                ],
                "id": "API_6",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "useState",
                "patterns": [
                    {
                        "pattern": "$Y(...)"
                    },
                    {
                        "pattern-inside": "...\nconst [$X, $Y] = useState(...)\n..."
                    }
                ],
                "id": "API_7",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "useEffect",
                "patterns": [
                    {
                        "pattern": "$R.style.transform = ..."
                    },
                    {
                        "pattern-inside": "setTimeout(...)"
                    },
                    {
                        "pattern-inside": "React.useEffect(...)"
                    }
                ],
                "id": "API_8",
                "description": "the state was updated inccorectly"
            },
            {
                "functionName": "useEffect",
                "patterns": [
                    {
                        "pattern": "$R.style.transform = ..."
                    },
                    {
                        "pattern-inside": "React.useEffect(...)"
                    }
                ],
                "id": "API_9",
                "description": "the state was updated inccorectly"
            },
            {
                "patterns": [
                    {
                        "pattern-either": [
                            {
                                "pattern": "<$R\n...\nonKeyUp={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyDown={...}\n.../>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyUp={...}\n...>\n...</$R>"
                            },
                            {
                                "pattern": "<$R\n...\nonKeyDown={...}\n...>\n...</$R>"
                            }
                        ]
                    }
                ],
                "id": "API_10",
                "description": "the state was updated inccorectly"
            },
            {
                "patterns": [
                    {
                        "pattern": "const $Y = (...) => {...}"
                    },
                    {
                        "pattern-inside": "const $E = (...) => {... return (<form onSubmit={$Y}>...</form>);...}"
                    }
                ],
                "id": "API_11",
                "description": "the state was updated inccorectly"
            }
        ],
        "DOM_events": [
            {
                "objectShape": {
                    "InputType": "submit",
                    "type": "click"
                },
                "id": "EVENT_1",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "InputType": "text",
                    "type": "keydown"
                },
                "id": "EVENT_2",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "keydown",
                    "target": "BUTTON"
                },
                "id": "EVENT_4",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "mouseover"
                },
                "id": "EVENT_6",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "mouseout"
                },
                "id": "EVENT_7",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "childList"
                },
                "id": "EVENT_3",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "attributes"
                },
                "id": "EVENT_5",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "click"
                },
                "id": "EVENT_8",
                "description": "the default behavior for the event was prevented"
            }
        ],
        "Network_events": [
            {
                "objectShape": {
                    "type": "responseReceived",
                    "mimeType": "text/html"
                },
                "id": "NETWORK_1",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "requestWillBeSent",
                    "method": "GET"
                },
                "id": "NETWORK_2",
                "description": "the default behavior for the event was prevented"
            },
            {
                "objectShape": {
                    "type": "responseReceived",
                    "mimeType": "application/json"
                },
                "id": "NETWORK_3",
                "description": "the default behavior for the event was prevented"
            }
        ]
    },
    "hypotheses": [
        {
            "id": "HYPOTHESIS_1",
            "hypothesis": "You are not using 'preventDefault' API to prevent the default behavior of the submit button.",
            "description": "When you use the submit button inside a form, the default behavior is to send the form data to the server and load a new page. However, this may not be the desired behavior, especially in React apps where you want to partially update the page.",
            "tags": [
                "incorrect add/remove item of a list of items",
                "unexpected reload of the page"
            ],
            "evidence": [
                {
                    "rule": "EVENT_2",
                    "description": "The first thing you did was typing in the input box.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "EVENT_1",
                    "description": "The you clicked on the submit button, which triggered a submit event.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_11",
                    "description": "The submit event was handled by a callback triggered after the submit event.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_1",
                    "description": "However, you did not use the preventDefault API to prevent the default behavior of the submit button. This often happen inside onSubmit event handler inside the form.",
                    "isFound": false,
                    "DoesContainTheDefect": true,
                    "HowToFix": {
                        "steps": [
                            {
                                "description": "Start by searching for the onSubmit event handler inside the form inside this file.",
                                "relatedEvidenceLocation": {
                                    "rule": "API_11",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "Inside the onSubmit event handler, add the preventDefault API to prevent the default behavior of the submit button.",
                                "codeExample": "const XXXXX = (e)=>{\n e.preventDefault() // <-- use this API inside the onSubmit callback\n}"
                            },
                            {
                                "description": "Now, when you click on the submit button, the page will not be reloaded."
                            }
                        ],
                        "links": [
                            {
                                "title": "Understanding React's preventdefault()",
                                "url": "https://sebhastian.com/react-preventdefault/#:~:text=To%20cancel%20the%20native%20behavior%20of%20the%20submit,inside%20handleSubmit%20will%20be%20run%20by%20the%20browser."
                            },
                            {
                                "title": "React Official Docs for Handling Events",
                                "url": "https://reactjs.org/docs/handling-events.html#:~:text=this%20could%20instead%20be"
                            },
                            {
                                "title": "MDN preventDefault",
                                "url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault#syntax"
                            }
                        ]
                    }
                },
                {
                    "rule": "NETWORK_1",
                    "description": "The browser reload since the submit behaior was not prevented.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                }
            ]
        },
        {
            "id": "HYPOTHESIS_2",
            "hypothesis": "The data received from the server is not being parsed, resulting in the program not rendering anything",
            "description": "Data was requested from a server and received successfully. However, the data was not parsed using the response.json() API before it was used, causing the program to either crash or display the data incorrectly.",
            "tags": [
                "Incorrect list item addition/removal",
                "Rendering an empty page",
                "Unable to render data fetched from the server"
            ],
            "evidence": [
                {
                    "rule": "EVENT_2",
                    "description": "A query was typed into a text box and the program used this query to request data from the server.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "EVENT_1",
                    "description": "The query was sent by clicking on the submit button.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "NETWORK_2",
                    "description": "The program successfully requested the data from the server.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "NETWORK_3",
                    "description": "The program received the response as a JSON object.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_3",
                    "description": "The data was not parsed using response.json() after being received from the server. Instead, the raw data was used.",
                    "isFound": false,
                    "DoesContainTheDefect": true,
                    "HowToFix": {
                        "steps": [
                            {
                                "description": "Locate where the fetch API is being used in your code. A potential location is shown in the follwing file.",
                                "relatedEvidenceLocation": {
                                    "rule": "NETWORK_3",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "Add the .json() API immediately after the fetch API.",
                                "codeExample": "fetch('A URL')\n.then(response => response.json()) // <-- add this line\n.then(...)"
                            },
                            {
                                "description": "Rerun the code to see if the issue has been resolved. If the problem persists, use the Hypothesizer for further investigation."
                            }
                        ],
                        "links": [
                            {
                                "title": "Using Fetch",
                                "url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
                            },
                            {
                                "title": "Fetch API",
                                "url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "HYPOTHESIS_3",
            "hypothesis": "The event listener for keyboard events is not attached to the correct element",
            "description": "When a key is pressed on the keyboard, the browser triggers a key event. The event listener must be implemented and attached to the appropriate element to respond to these key events.",
            "tags": [
                "No response when pressing keys on the keyboard",
                "Event listener not working"
            ],
            "evidence": [
                {
                    "rule": "EVENT_1",
                    "description": "A button on the interface was clicked, causing the browser to focus on a specific element, but no response was observed.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "EVENT_4",
                    "description": "Key(s) were pressed on the keyboard, triggering keybord events.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_10",
                    "description": "However, the callback (onKeyDown or onKeyUp) is attached to different element than the one that received the key event.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_4",
                    "description": "The event listener is attached to the incorrect element.",
                    "isFound": false,
                    "DoesContainTheDefect": true,
                    "HowToFix": {
                        "steps": [
                            {
                                "description": "Locate the element that has the event listener attached to it but does not receive the key event. A potential location is shown in the following file.",
                                "relatedEvidenceLocation": {
                                    "rule": "API_10",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "Located the element that receives the key event but does not have the event listener attached to it. A potential location is shown in the following file.",
                                "relatedEvidenceLocation": {
                                    "rule": "EVENT_4",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "Attach the event listener to the correct element. Remove event listeners such as `onKeyUp` or `onKeyDown` from the incorrect element and add them to the correct element.",
                                "codeExample": "...\n<ElementInStep1\nonKeyUp={callback}> // <-- remove this\n</ElementInStep1>\n ...\n<ElementInStep2\nonKeyUp={callback}> // <-- add this\n</ElementInStep2>\n ..."
                            },
                            {
                                "description": "Run the code again and check if the issue has been resolved. If not, use Hypothesizer for further investigation."
                            }
                        ],
                        "links": [
                            {
                                "title": "Using the onKeyUp event in React",
                                "url": "https://bobbyhadz.com/blog/typescript-react-onkeyup-event-type"
                            },
                            {
                                "title": "Handling Events in React",
                                "url": "https://reactjs.org/docs/handling-events.html"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "HYPOTHESIS_4",
            "hypothesis": "You are only handling onmouseOver event, but not onmouseOut event.",
            "description": "When you hover over an element, the browser will trigger a mouseOver event. When you move the mouse out of the element, the browser will trigger a mouseOut event. You need to implement the correct event handler to listen to the mouse events and attach the event handler to the correct element.",
            "tags": [
                "no response when moving the mouse out of an element",
                "event listener is not working",
                "incorrect style of an element"
            ],
            "evidence": [
                {
                    "rule": "EVENT_6",
                    "description": "You hovered over element(s) on the interface, which triggered mouseOver events.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_5",
                    "description": "The code hanlded the mouseOver event using the onmouseOver event handler.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "EVENT_7",
                    "description": "You moved the mouse out of the element(s) on the interface, which triggered mouseOut events.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_6",
                    "description": "The code did not handle the mouseOut event using the onmouseOut event handler.",
                    "isFound": true,
                    "DoesContainTheDefect": true,
                    "HowToFix": {
                        "steps": [
                            {
                                "description": "The event was triggered from the element highlighted. However, you either did not implement the event handler correctly or you attached the event handler to the wrong element. Search for where the event handler is implemented now inside the file. Search for onmouseOver. Remove the event handler from the element if you find it.",
                                "relatedEvidenceLocation": {
                                    "rule": "EVENT_6",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "You need to add the correct event handler to the highlighted element in the above file. For example, try onmouseOut.",
                                "codeExample": "...\n<XXX\nonmouseOut={callback}> // <-- add this inside to the element highlight above. Please use the approprate callback.\n</XXX>\n..."
                            },
                            {
                                "description": "Try to run the code again and see if the problem is fixed. If not, please use Hypothesizer again for futher investigation."
                            }
                        ],
                        "links": [
                            {
                                "title": "Type the onmouseOut event in React",
                                "url": "https://bobbyhadz.com/blog/typescript-react-onmouseOut-event-type"
                            },
                            {
                                "title": "Handling Events",
                                "url": "https://reactjs.org/docs/handling-events.html"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "id": "HYPOTHESIS_5",
            "hypothesis": "You need to apply the annimation inside setTimeout and useEffect.",
            "description": "After React add/update an element in the DOM, it will execute the related useEffect hook. You need to apply the annimation inside the related useEffect hook by using setTimeout.",
            "tags": [
                "annimation is not working"
            ],
            "evidence": [
                {
                    "rule": "EVENT_8",
                    "description": "You clicked on an Element on the Interface",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_7",
                    "description": "You updated the state of the element(s) using the setState function.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "EVENT_3",
                    "description": "Updating the state cuased the element to be updated in the DOM.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_9",
                    "description": "You applied the annimation inside the useEffect hook.",
                    "isFound": true,
                    "DoesContainTheDefect": false
                },
                {
                    "rule": "API_8",
                    "description": "However, you did not apply the annimation inside setTimeout, which means the annimation may be applied before the element is updated in the DOM.",
                    "isFound": false,
                    "DoesContainTheDefect": true,
                    "HowToFix": {
                        "steps": [
                            {
                                "description": "Find the related useEffect hook in the file that applied the annimation. Here is acandidate useEffect hook that you may want to check.",
                                "relatedEvidenceLocation": {
                                    "rule": "API_9",
                                    "exactLocation": true
                                }
                            },
                            {
                                "description": "Add setTimeout to the useEffect hook.",
                                "codeExample": "...\nuseEffect(() => {\nsetTimeout(() => {\n// apply annimation here\n}, 0);\n}, []);\n..."
                            },
                            {
                                "description": "Try to run the code again and see if the problem is fixed. If not, please use Hypothesizer again for futher investigation."
                            }
                        ],
                        "links": [
                            {
                                "title": "Animation Classes & useEffect Hooks",
                                "url": "https://dev.to/avatarkaleb/animation-classes-useeffect-hooks-is-there-a-better-way-2hfn"
                            }
                        ]
                    }
                }
            ]
        }
    ]
}
